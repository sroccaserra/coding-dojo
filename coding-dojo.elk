;;
;; Tests for coding-dojo.el
;;
;; Uses elk-test, see http://nschum.de/src/emacs/elk-test/
;;

(require 'coding-dojo)

(deftest "Template dir variable is set and points to a directory"
  (assert-t (boundp '*dojo-template-dir*))
  (assert-t (file-directory-p *dojo-template-dir*)))

(deftest "Lua template dir exists"
  (assert-t (file-directory-p (dojo-template-dir "lua")))
  (assert-t (file-directory-p (dojo-template-dir "Lua"))))

(deftest "Project dir variable is set and points to a directory"
  (assert-t (boundp '*dojo-project-dir*))
  (assert-t (file-directory-p *dojo-project-dir*)))

(deftest "Project path is correct"
  (let ((project (make-dojo-project :name "autoTest"
                                    :language "lua")))
    (assert-equal (concat *dojo-project-dir* "/AutoTest-lua")
                  (dojo-project-dir-for project))))

(deftest "Def Struct"
  (let ((project (make-dojo-project :name "AutoTest")))
    (assert-equal "AutoTest"
                  (dojo-project-name project))
    (setf (dojo-project-name project) "AutoTeste")
    (assert-equal "AutoTeste"
                  (dojo-project-name project))))

(deftest "Find languages"
  (assert-nonnil (member "Lua" (dojo-find-languages))))

(defun test-in-project (test-func)
  (let ((project (make-dojo-project :name "autoTest"
                                    :language "lua")))
    (let ((dir (dojo-project-dir-for project)))
      (when (file-directory-p dir)
        (delete-directory dir t)))
    (dojo-create-project project)
    (apply test-func (list project))
    (dojo-delete-project project)))

(deftest "Project creation succeeds"
  (test-in-project
   (lambda (project)
     (assert-t (file-directory-p (dojo-project-dir-for project))))))

(deftest "Project removal succeeds"
  (let* ((project (make-dojo-project :name "autoTest"
                                     :language "lua")))
    (dojo-create-project project)
    (dojo-delete-project project)
    (assert-nil (file-directory-p (dojo-project-dir-for project)))))

(deftest "Split a string"
  (assert-eq 2 (length (split-string "toto\ntata titi" "\n"))))

(deftest "Find if"
  (assert-nonnil (find-if (lambda (x) (string-match "main" x))
                          '("toto" "test/main.lua"))))

(deftest "Find main file"
  (test-in-project
   (lambda (project)
     (assert-equal (concat *dojo-project-dir* "/AutoTest-lua/xxxx.lua")
                   (dojo-find-main-file project)))))

(deftest "File list contains main"
  (test-in-project
   (lambda (project)
     (assert-nonnil (find-if (lambda (file) (string-match "xxxx" file))
                             (dojo-find-project-files project))))))

(deftest "Main file contains 'xxxx'"
  (test-in-project
   (lambda (project)
     (let ((shell-command (format "grep -o1 xxxx %s"
                                  (dojo-find-main-file project))))
       (assert-equal "xxxx\n"
                     (shell-command-to-string shell-command))))))

(deftest "Variable substitution in all files"
  (test-in-project
   (lambda (project)
     (let* ((project-name (dojo-project-name project))
            (main-file (dojo-find-main-file project)))
       (dojo-substitute-variables project)
       (assert-equal ""
                     (shell-command-to-string (format "grep -r xxxx %s" (dojo-project-dir-for project))))
       (assert-equal (concat project-name "\n")
                     (shell-command-to-string (format "grep -o1 %s %s" project-name main-file)))))))

(deftest "Rename all files with xxxx in their name"
  (test-in-project
   (lambda (project)
     (dojo-rename-files project)
     (let ((project-files (dojo-find-project-files project)))
       (assert-nil (find-if (partial string-match "xxxx")
                            project-files))))))

(deftest "Find test file"
  (test-in-project
   (lambda (project)
     (assert-t (file-exists-p (dojo-find-test-file project))))))

(deftest "Creating an existing project fails"
  (let* ((project (make-dojo-project :name "autoTest"
                                     :language "lua")))
    (dojo-create-project project)
    (assert-error "already exists"
                  (dojo-create-project project))
    (dojo-delete-project project)))

(deftest "haskell module names"
  (assert-t (valid-haskell-module-p "Toto1"))
  (assert-nil (valid-haskell-module-p "toto")))
